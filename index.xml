<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ладыгин Сергей</title><link>https://updev.ru/</link><description>Recent content on Ладыгин Сергей</description><generator>Hugo</generator><language>ru-ru</language><lastBuildDate>Sat, 04 May 2024 20:30:00 +0300</lastBuildDate><atom:link href="https://updev.ru/index.xml" rel="self" type="application/rss+xml"/><item><title>Strapi - запуск в Docker Swarm</title><link>https://updev.ru/articles/strapi-docker-swarm/</link><pubDate>Sat, 04 May 2024 20:30:00 +0300</pubDate><guid>https://updev.ru/articles/strapi-docker-swarm/</guid><description>После того как мы создали первую версию нашего приложения, создали Dockerfile, проверили работоспособность приложения в контейнере, встает вопрос как это выложить на prod, и самое главное как его обновлять далее.
Можно пойти в Kubernetes, но если у вас не большое количество сервисов и нет отдельного отдела для обслуживания Kubernetes, то следуют выбрать что-то попроще.
Экосистема Docker предлагает нам воспользоваться режимом swarm mode. В этом режиме, можно объединять несколько серверов в один кластер и запускать в нем приложения точно так же, как на одном сервере.</description></item><item><title>Strapi - Подключение S3 хранилища для файлов</title><link>https://updev.ru/articles/strapi-s3/</link><pubDate>Wed, 01 May 2024 20:00:00 +0300</pubDate><guid>https://updev.ru/articles/strapi-s3/</guid><description>Для хранения загружаемых файлов будем использовать S3 хранилище - Yandex Object Storage. В нем можно дешево хранить файлы и быстро раздавать их через cdn.
Инструкция по созданию бакета и настройке публичного доступа.
Устанавливаем в strapi плагин для работы с S3 хранилищем.
npm install @strapi/provider-upload-aws-s3 --save Добавить конфигурацию для подключения к S3 Yandex cloud
module.exports = ({ env }) =&amp;gt; ({ upload: { config: { provider: &amp;#39;aws-s3&amp;#39;, providerOptions: { credentials: { accessKeyId: env(&amp;#39;YC_ACCESS_KEY_ID&amp;#39;), secretAccessKey: env(&amp;#39;YC_ACCESS_SECRET&amp;#39;), }, region: &amp;#39;ru-central1&amp;#39;, endpoint: &amp;#39;https://storage.</description></item><item><title>Strapi - установка и настройка</title><link>https://updev.ru/articles/strapi-install/</link><pubDate>Thu, 25 Apr 2024 19:30:00 +0300</pubDate><guid>https://updev.ru/articles/strapi-install/</guid><description>Strapi - популярная open-source headless CMS. Написана на JavaScript/TypeScript, максимально настраивается под ваши задачи.
Данная CMS создана для разработчиков, она делает множество рутинной работы, позволяя сосредоточится на бизнес логике. Подходит для широкого спектра задач - блоги, порталы, каталоги, сервисы, магазины и многое другое.
Создание проекта Исчерпывающая инструкция на официальном сайте, тут я приведу краткий набор команд и действия. Демо приложение будет находиться в папке strapi.
Перед установкой у вас должно быть:</description></item><item><title>Dkron PHP Client</title><link>https://updev.ru/projects/dkron-php-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://updev.ru/projects/dkron-php-client/</guid><description>Клиент на PHP для API Dkron.
Бибилиотека использует последнюю версию API, работает на актуальных версиях PHP и 100% кода покрыто unit тестами.
Документация API Dkron
Пример подключения библиотеки в проект composer require updevru/dkron-php-client Пример использования use Http\Client\Curl\Client; use Nyholm\Psr7\Factory\Psr17Factory; use Updevru\Dkron\ApiClient; use Updevru\Dkron\Endpoint\EndpointCollection; $client = new Updevru\Dkron\ApiClient( new Updevru\Dkron\Endpoint\EndpointCollection( [ [ &amp;#39;url&amp;#39; =&amp;gt; &amp;#39;http://localhost&amp;#39;, &amp;#39;login&amp;#39; =&amp;gt; null, &amp;#39;password&amp;#39; =&amp;gt; null, ] ] ), new Http\Client\Curl\Client(), new Nyholm\Psr7\Factory\Psr17Factory(), new Nyholm\Psr7\Factory\Psr17Factory() ); $api = new \Updevru\Dkron\Api($client, new \Updevru\Dkron\Serializer\JMSSerializer()); $jobs = $api-&amp;gt;jobs-&amp;gt;getJobs(); $newJob = new \Updevru\Dkron\Dto\JobDto(); $newJob-&amp;gt;setName(&amp;#39;test_job&amp;#39;); $newJob-&amp;gt;setSchedule(&amp;#39;*/2 * * * * *&amp;#39;); $newJob-&amp;gt;setConcurrency(\Updevru\Dkron\Dto\JobDto::CONCURRENCY_FORBID); $newJob-&amp;gt;setExecutor(&amp;#39;shell&amp;#39;); $newJob-&amp;gt;setExecutorConfig([&amp;#39;command&amp;#39; =&amp;gt; &amp;#39;echo Hello&amp;#39;]); $api-&amp;gt;jobs-&amp;gt;createOrUpdateJob($newJob); $api-&amp;gt;jobs-&amp;gt;toggleJob(&amp;#39;test_job&amp;#39;); $api-&amp;gt;jobs-&amp;gt;deleteJob(&amp;#39;test_job&amp;#39;); Более подробная информация на Github.</description></item><item><title>PolkovnikBot</title><link>https://updev.ru/projects/polkovnik-bot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://updev.ru/projects/polkovnik-bot/</guid><description>Бот-помощник по организации работы команды и увеличения ее эффективности. Помогает не пропускать важные события (встречи, дни рождения), контролирует списание врмение в задачах (если кто то забыл - напоминает), уведомляет о важных событиях (новые pull request, релизы, сборки и прочее).
Проект призван забрать на себя часть рутины, которую можно автоматизировать.
Возможности Напоминание о списании времени по задачам Уведомление об отпусках Отправка сообщений в командный чат по расписанию Интеграция с такс трекерами - Jira Интеграция с чатами - Telegram, Webex Управление через web интерфейс API Более подробная информация на Github.</description></item><item><title>Мое резюме</title><link>https://updev.ru/resume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://updev.ru/resume/</guid><description>Меня зовут Ладыгин Сергей, я профессионально занимаюсь разработкой более 15 лет. Муж и отец 3 детей. Увлекаюсь спортом - велосипед, плавание, баскетбол, волейбол, настольный тенис.
Компетенции 1. Программирование Мои основные языки программирование - PHP и JavaScript. В них я лучше всего разбираюсь и дольше всего с ними работаю. В этом стэке много работал с фреймворками Symfony и Laravel.
Последнее время в основном программирую на TypeScript, Go и Node.
Знаю базы данных PostgreSQL, MySQL и MongoDB на хорошем уровне (оптимизация, хранимые процедуры, условные индексы и прочее).</description></item></channel></rss>